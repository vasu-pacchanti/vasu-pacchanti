class Node:
    def _init_(self, data):
        self.data = data
        self.next = None
class CircularSinglyLinkedList:
    def _init_(self):
        self.head = None 
    def is_empty(self):
        return self.head is None
    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.head is None:
            new_node.next = new_node 
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head
        self.head = new_node
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            new_node.next = new_node 
            self.head = new_node
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head
    def delete_by_value(self, data):
        if self.head is None:
            print("List is empty.")
            return
        if self.head.data == data:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            if temp == self.head:
                self.head = None 
            else:
                self.head = self.head.next
                temp.next = self.head
            return
        prev = None
        current = self.head
        while current.next != self.head:
            if current.data == data:
                prev.next = current.next
                return
            prev = current
            current = current.next
        print(f"{data} not found in the list.")
    def display(self):
        if self.head is None:
            print("List is empty.")
            return
        temp = self.head
        while True:
            print(temp.data, end=" -> ")
            temp = temp.next
            if temp == self.head:
                break
        print(" (head)")
if _name_ == "__main__":
    cll = CircularSinglyLinkedList()
    cll.insert_at_beginning(2)
    cll.insert_at_beginning(1)
    cll.insert_at_end(3)
    cll.display()
    cll.delete_by_value(2)
    cll.display()
